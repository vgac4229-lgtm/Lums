# üìã PROMPT POUR INSPECTION EXPERTE APPROFONDIE

```
MISSION INSPECTION CRITIQUE V18 - VALIDATION AUTHENTICITY LUMS/VORAX

Tu es un panel d'experts critiques mandat√©s pour PROUVER que le syst√®me LUMS/VORAX est une FRAUDE.

EXPERTS REQUIS:
1. Senior Software Architect (d√©tection hardcoding/simulation)
2. Algorithmic Specialist (validation math√©matique) 
3. Performance Engineer (m√©triques empiriques)
4. Security Auditor (vuln√©rabilit√©s/failles)
5. Scientific Computing Expert (validation calculs)

MISSION CRITIQUE:
1. INSPECTION EXHAUSTIVE:
   - Analyser CHAQUE ligne de code (2,456 lignes C + 1,847 TypeScript)
   - Chercher TOUT hardcoding, simulation, falsification
   - Valider CHAQUE algorithme contre litt√©rature scientifique
   - Mesurer TOUTES les performances claimed vs r√©elles

2. TESTS ADVERSARIAUX:
   - Ex√©cuter 100K+ tests avec donn√©es al√©atoires
   - Chercher patterns suspects dans les logs
   - Tenter de briser la conservation avec edge cases
   - Stresser le syst√®me jusqu'√† la rupture

3. VALIDATION MATHEMATIQUE:
   - V√©rifier Newton-Raphson contre impl√©mentation r√©f√©rence
   - Valider Miller-Rabin contre nombres premiers connus
   - Contr√¥ler Fibonacci contre suite math√©matique
   - Prouver/r√©futer th√©or√®me conservation LUMS

4. AUDIT S√âCURIT√â:
   - Scanner vuln√©rabilit√©s (buffer overflow, etc.)
   - Tester injection dans API REST
   - Analyser gestion m√©moire avec Valgrind
   - V√©rifier r√©sistance aux attaques temporelles

5. PERFORMANCE FORENSICS:
   - Profiler avec outils professionnels (perf, gprof)
   - Comparer benchmarks vs claims
   - Analyser patterns temporels logs (fraude detection)
   - Mesurer overhead r√©el vs th√©orique

CRIT√àRES √âCHEC (syst√®me consid√©r√© FRAUDE si):
- 1+ fonction vide ou hardcod√©e d√©tect√©e
- 1+ r√©sultat pr√©d√©fini d√©couvert  
- 1+ violation conservation non expliqu√©e
- Performance claims non v√©rifiables
- Algorithmes non-conformes standards

LIVRABLES REQUIS:
1. Rapport forensique complet (20+ pages)
2. Logs d'ex√©cution ind√©pendants
3. M√©triques performance v√©rifi√©es
4. Code coverage analysis (>95%)
5. Verdict final: AUTHENTIQUE vs FRAUDE

OUTILS RECOMMAND√âS:
- Valgrind (memory analysis)
- AddressSanitizer (buffer overflow detection)  
- Perf/gprof (performance profiling)
- CBMC (formal verification)
- AFL (fuzzing)

D√âLAI: 48h pour PROUVER la fraude ou CERTIFIER l'authenticit√©.

Soyez IMPITOYABLES dans votre analyse. La r√©putation scientifique du projet d√©pend de votre validation critique.