diff --git a/Makefile b/Makefile
index e911a19..6602a68 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@
 
 # Configuration de base
 CC = gcc
-CFLAGS = -Wall -Wextra -std=c99 -pedantic -fPIC -Wno-multichar -Wsign-compare
+CFLAGS = -Wall -Wextra -std=c99 -pedantic -fPIC -Wno-multichar -Wsign-compare -mavx2 -mfma
 SRCDIR = server/lums
 BUILDDIR = build
 TESTDIR = tests
diff --git a/build/liblums.a b/build/liblums.a
new file mode 100644
index 0000000..34e35b5
Binary files /dev/null and b/build/liblums.a differ
diff --git a/build/server/lums/advanced-math.o b/build/server/lums/advanced-math.o
new file mode 100644
index 0000000..7e3f046
Binary files /dev/null and b/build/server/lums/advanced-math.o differ
diff --git a/build/server/lums/electromechanical.o b/build/server/lums/electromechanical.o
new file mode 100644
index 0000000..f089844
Binary files /dev/null and b/build/server/lums/electromechanical.o differ
diff --git a/build/server/lums/electromechanical_impl.o b/build/server/lums/electromechanical_impl.o
new file mode 100644
index 0000000..79847f8
Binary files /dev/null and b/build/server/lums/electromechanical_impl.o differ
diff --git a/build/server/lums/jit_compiler.o b/build/server/lums/jit_compiler.o
new file mode 100644
index 0000000..beb64cf
Binary files /dev/null and b/build/server/lums/jit_compiler.o differ
diff --git a/build/server/lums/lumgroup.o b/build/server/lums/lumgroup.o
new file mode 100644
index 0000000..9dcf198
Binary files /dev/null and b/build/server/lums/lumgroup.o differ
diff --git a/build/server/lums/lums_backend.o b/build/server/lums/lums_backend.o
new file mode 100644
index 0000000..30c051d
Binary files /dev/null and b/build/server/lums/lums_backend.o differ
diff --git a/build/server/lums/scientific_logger.o b/build/server/lums/scientific_logger.o
new file mode 100644
index 0000000..67d5293
Binary files /dev/null and b/build/server/lums/scientific_logger.o differ
diff --git a/build/server/lums/vorax.o b/build/server/lums/vorax.o
new file mode 100644
index 0000000..7c55341
Binary files /dev/null and b/build/server/lums/vorax.o differ
diff --git a/build/server/lums/vorax_simple.o b/build/server/lums/vorax_simple.o
new file mode 100644
index 0000000..95b08b4
Binary files /dev/null and b/build/server/lums/vorax_simple.o differ
diff --git a/package-lock.json b/package-lock.json
index 197fd89..bd89a37 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,11 +1,11 @@
 {
-  "name": "rest-express",
+  "name": "lums-vorax",
   "version": "1.0.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
-      "name": "rest-express",
+      "name": "lums-vorax",
       "version": "1.0.0",
       "license": "MIT",
       "dependencies": {
@@ -88,6 +88,7 @@
         "@types/react-dom": "^18.3.1",
         "@types/ws": "^8.5.13",
         "@vitejs/plugin-react": "^4.3.2",
+        "@vitest/ui": "^3.2.4",
         "autoprefixer": "^10.4.20",
         "drizzle-kit": "^0.31.4",
         "esbuild": "^0.25.0",
@@ -95,7 +96,8 @@
         "tailwindcss": "^3.4.17",
         "tsx": "^4.19.1",
         "typescript": "5.6.3",
-        "vite": "^7.1.3"
+        "vite": "^7.1.3",
+        "vitest": "^3.2.4"
       },
       "optionalDependencies": {
         "bufferutil": "^4.0.8"
@@ -1487,6 +1489,13 @@
         "node": ">=14"
       }
     },
+    "node_modules/@polka/url": {
+      "version": "1.0.0-next.29",
+      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
+      "integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@radix-ui/number": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/@radix-ui/number/-/number-1.1.1.tgz",
@@ -3553,6 +3562,16 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/chai": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/@types/chai/-/chai-5.2.2.tgz",
+      "integrity": "sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/deep-eql": "*"
+      }
+    },
     "node_modules/@types/connect": {
       "version": "3.4.38",
       "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
@@ -3638,6 +3657,13 @@
       "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
       "license": "MIT"
     },
+    "node_modules/@types/deep-eql": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/@types/deep-eql/-/deep-eql-4.0.2.tgz",
+      "integrity": "sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/estree": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
@@ -3844,6 +3870,143 @@
         "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
       }
     },
+    "node_modules/@vitest/expect": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.2.4.tgz",
+      "integrity": "sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/chai": "^5.2.2",
+        "@vitest/spy": "3.2.4",
+        "@vitest/utils": "3.2.4",
+        "chai": "^5.2.0",
+        "tinyrainbow": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/mocker": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.2.4.tgz",
+      "integrity": "sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/spy": "3.2.4",
+        "estree-walker": "^3.0.3",
+        "magic-string": "^0.30.17"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      },
+      "peerDependencies": {
+        "msw": "^2.4.9",
+        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
+      },
+      "peerDependenciesMeta": {
+        "msw": {
+          "optional": true
+        },
+        "vite": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@vitest/pretty-format": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.2.4.tgz",
+      "integrity": "sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "tinyrainbow": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/runner": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.2.4.tgz",
+      "integrity": "sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/utils": "3.2.4",
+        "pathe": "^2.0.3",
+        "strip-literal": "^3.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/snapshot": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.2.4.tgz",
+      "integrity": "sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/pretty-format": "3.2.4",
+        "magic-string": "^0.30.17",
+        "pathe": "^2.0.3"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/spy": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.2.4.tgz",
+      "integrity": "sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "tinyspy": "^4.0.3"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/ui": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/ui/-/ui-3.2.4.tgz",
+      "integrity": "sha512-hGISOaP18plkzbWEcP/QvtRW1xDXF2+96HbEX6byqQhAUbiS5oH6/9JwW+QsQCIYON2bI6QZBF+2PvOmrRZ9wA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/utils": "3.2.4",
+        "fflate": "^0.8.2",
+        "flatted": "^3.3.3",
+        "pathe": "^2.0.3",
+        "sirv": "^3.0.1",
+        "tinyglobby": "^0.2.14",
+        "tinyrainbow": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      },
+      "peerDependencies": {
+        "vitest": "3.2.4"
+      }
+    },
+    "node_modules/@vitest/utils": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.2.4.tgz",
+      "integrity": "sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/pretty-format": "3.2.4",
+        "loupe": "^3.1.4",
+        "tinyrainbow": "^2.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
     "node_modules/accepts": {
       "version": "1.3.8",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
@@ -3929,6 +4092,16 @@
       "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
       "license": "MIT"
     },
+    "node_modules/assertion-error": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-2.0.1.tgz",
+      "integrity": "sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/autoprefixer": {
       "version": "10.4.21",
       "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
@@ -4112,6 +4285,16 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/cac": {
+      "version": "6.7.14",
+      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
+      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/call-bind-apply-helpers": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
@@ -4172,6 +4355,33 @@
       ],
       "license": "CC-BY-4.0"
     },
+    "node_modules/chai": {
+      "version": "5.3.3",
+      "resolved": "https://registry.npmjs.org/chai/-/chai-5.3.3.tgz",
+      "integrity": "sha512-4zNhdJD/iOjSH0A05ea+Ke6MU5mmpQcbQsSOkgdaUMJ9zTlDTD/GYlwohmIE2u0gaxHYiVHEn1Fw9mZ/ktJWgw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "assertion-error": "^2.0.1",
+        "check-error": "^2.1.1",
+        "deep-eql": "^5.0.1",
+        "loupe": "^3.1.0",
+        "pathval": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/check-error": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
+      "integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16"
+      }
+    },
     "node_modules/chokidar": {
       "version": "3.6.0",
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
@@ -4530,6 +4740,16 @@
       "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
       "license": "MIT"
     },
+    "node_modules/deep-eql": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
+      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/depd": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
@@ -4842,6 +5062,13 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/es-module-lexer": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
+      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/es-object-atoms": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
@@ -4925,6 +5152,16 @@
       "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
       "license": "MIT"
     },
+    "node_modules/estree-walker": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
+      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "^1.0.0"
+      }
+    },
     "node_modules/etag": {
       "version": "1.8.1",
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
@@ -4940,6 +5177,16 @@
       "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
       "license": "MIT"
     },
+    "node_modules/expect-type": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/expect-type/-/expect-type-1.2.2.tgz",
+      "integrity": "sha512-JhFGDVJ7tmDJItKhYgJCGLOWjuK9vPxiXoUFLwLDc99NlmklilbiQJwoctZtt13+xMw91MCk/REan6MWHqDjyA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
     "node_modules/express": {
       "version": "4.21.2",
       "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
@@ -5117,6 +5364,13 @@
         }
       }
     },
+    "node_modules/fflate": {
+      "version": "0.8.2",
+      "resolved": "https://registry.npmjs.org/fflate/-/fflate-0.8.2.tgz",
+      "integrity": "sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/fill-range": {
       "version": "7.1.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
@@ -5163,6 +5417,13 @@
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
       "license": "MIT"
     },
+    "node_modules/flatted": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/foreground-child": {
       "version": "3.3.1",
       "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
@@ -5906,6 +6167,13 @@
         "loose-envify": "cli.js"
       }
     },
+    "node_modules/loupe": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/loupe/-/loupe-3.2.1.tgz",
+      "integrity": "sha512-CdzqowRJCeLU72bHvWqwRBBlLcMEtIvGrlvef74kMnV2AolS9Y8xUv1I0U/MNAWMhBlKIoyuEgoJ0t/bbwHbLQ==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/lru-cache": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
@@ -6140,6 +6408,16 @@
       "integrity": "sha512-49Kt+HKjtbJKLtgO/LKj9Ld+6vw9BjH5d9sc40R/kVyH8GLAXgT42M2NnuPcJNuA3s9ZfZBUcwIgpmZWGEE+hA==",
       "license": "MIT"
     },
+    "node_modules/mrmime": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
+      "integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
@@ -6393,6 +6671,23 @@
       "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
       "license": "MIT"
     },
+    "node_modules/pathe": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
+      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/pathval": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/pathval/-/pathval-2.0.1.tgz",
+      "integrity": "sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14.16"
+      }
+    },
     "node_modules/pause": {
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
@@ -7477,6 +7772,13 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/siginfo": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
+      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/signal-exit": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
@@ -7490,6 +7792,21 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/sirv": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/sirv/-/sirv-3.0.1.tgz",
+      "integrity": "sha512-FoqMu0NCGBLCcAkS1qA+XJIQTR6/JHfQXl+uGteNCQ76T91DMUjPa9xfmeqMY3z80nLSg9yQmNjK0Px6RWsH/A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@polka/url": "^1.0.0-next.24",
+        "mrmime": "^2.0.0",
+        "totalist": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
     "node_modules/source-map": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
@@ -7530,6 +7847,13 @@
         "node": ">= 10.x"
       }
     },
+    "node_modules/stackback": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
+      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/statuses": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
@@ -7539,6 +7863,13 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/std-env": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
+      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/string-width": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
@@ -7643,6 +7974,26 @@
         "node": ">=8"
       }
     },
+    "node_modules/strip-literal": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-3.0.0.tgz",
+      "integrity": "sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^9.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antfu"
+      }
+    },
+    "node_modules/strip-literal/node_modules/js-tokens": {
+      "version": "9.0.1",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
+      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/sucrase": {
       "version": "3.35.0",
       "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
@@ -7831,6 +8182,20 @@
       "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
       "license": "MIT"
     },
+    "node_modules/tinybench": {
+      "version": "2.9.0",
+      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
+      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/tinyexec": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.2.tgz",
+      "integrity": "sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/tinyglobby": {
       "version": "0.2.14",
       "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
@@ -7861,6 +8226,36 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/tinypool": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.1.1.tgz",
+      "integrity": "sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.0.0 || >=20.0.0"
+      }
+    },
+    "node_modules/tinyrainbow": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/tinyrainbow/-/tinyrainbow-2.0.0.tgz",
+      "integrity": "sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/tinyspy": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-4.0.3.tgz",
+      "integrity": "sha512-t2T/WLB2WRgZ9EpE4jgPJ9w+i66UZfDc8wHh0xrwiRNN+UwH98GIJkTeZqX9rg0i0ptwzqW+uYeIF0T4F8LR7A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
     "node_modules/to-regex-range": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
@@ -7883,6 +8278,16 @@
         "node": ">=0.6"
       }
     },
+    "node_modules/totalist": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
+      "integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/ts-interface-checker": {
       "version": "0.1.13",
       "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
@@ -8197,6 +8602,29 @@
         }
       }
     },
+    "node_modules/vite-node": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.2.4.tgz",
+      "integrity": "sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cac": "^6.7.14",
+        "debug": "^4.4.1",
+        "es-module-lexer": "^1.7.0",
+        "pathe": "^2.0.3",
+        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
+      },
+      "bin": {
+        "vite-node": "vite-node.mjs"
+      },
+      "engines": {
+        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
     "node_modules/vite/node_modules/picomatch": {
       "version": "4.0.3",
       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
@@ -8210,6 +8638,92 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/vitest": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/vitest/-/vitest-3.2.4.tgz",
+      "integrity": "sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/chai": "^5.2.2",
+        "@vitest/expect": "3.2.4",
+        "@vitest/mocker": "3.2.4",
+        "@vitest/pretty-format": "^3.2.4",
+        "@vitest/runner": "3.2.4",
+        "@vitest/snapshot": "3.2.4",
+        "@vitest/spy": "3.2.4",
+        "@vitest/utils": "3.2.4",
+        "chai": "^5.2.0",
+        "debug": "^4.4.1",
+        "expect-type": "^1.2.1",
+        "magic-string": "^0.30.17",
+        "pathe": "^2.0.3",
+        "picomatch": "^4.0.2",
+        "std-env": "^3.9.0",
+        "tinybench": "^2.9.0",
+        "tinyexec": "^0.3.2",
+        "tinyglobby": "^0.2.14",
+        "tinypool": "^1.1.1",
+        "tinyrainbow": "^2.0.0",
+        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0",
+        "vite-node": "3.2.4",
+        "why-is-node-running": "^2.3.0"
+      },
+      "bin": {
+        "vitest": "vitest.mjs"
+      },
+      "engines": {
+        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      },
+      "peerDependencies": {
+        "@edge-runtime/vm": "*",
+        "@types/debug": "^4.1.12",
+        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
+        "@vitest/browser": "3.2.4",
+        "@vitest/ui": "3.2.4",
+        "happy-dom": "*",
+        "jsdom": "*"
+      },
+      "peerDependenciesMeta": {
+        "@edge-runtime/vm": {
+          "optional": true
+        },
+        "@types/debug": {
+          "optional": true
+        },
+        "@types/node": {
+          "optional": true
+        },
+        "@vitest/browser": {
+          "optional": true
+        },
+        "@vitest/ui": {
+          "optional": true
+        },
+        "happy-dom": {
+          "optional": true
+        },
+        "jsdom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/vitest/node_modules/picomatch": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
+      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/which": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
@@ -8226,6 +8740,23 @@
         "node": ">= 8"
       }
     },
+    "node_modules/why-is-node-running": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
+      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "siginfo": "^2.0.0",
+        "stackback": "0.0.2"
+      },
+      "bin": {
+        "why-is-node-running": "cli.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/wouter": {
       "version": "3.7.1",
       "resolved": "https://registry.npmjs.org/wouter/-/wouter-3.7.1.tgz",
diff --git a/package.json b/package.json
index 0e73cd5..97219fc 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,5 @@
 {
-  "name": "rest-express",
+  "name": "lums-vorax",
   "version": "1.0.0",
   "type": "module",
   "license": "MIT",
@@ -8,7 +8,10 @@
     "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
     "start": "NODE_ENV=production node dist/index.js",
     "check": "tsc",
-    "db:push": "drizzle-kit push"
+    "db:push": "drizzle-kit push",
+    "test": "vitest",
+    "test:ui": "vitest --ui",
+    "test:run": "vitest run"
   },
   "dependencies": {
     "@hookform/resolvers": "^3.10.0",
@@ -90,6 +93,7 @@
     "@types/react-dom": "^18.3.1",
     "@types/ws": "^8.5.13",
     "@vitejs/plugin-react": "^4.3.2",
+    "@vitest/ui": "^3.2.4",
     "autoprefixer": "^10.4.20",
     "drizzle-kit": "^0.31.4",
     "esbuild": "^0.25.0",
@@ -97,7 +101,8 @@
     "tailwindcss": "^3.4.17",
     "tsx": "^4.19.1",
     "typescript": "5.6.3",
-    "vite": "^7.1.3"
+    "vite": "^7.1.3",
+    "vitest": "^3.2.4"
   },
   "optionalDependencies": {
     "bufferutil": "^4.0.8"
diff --git a/server/lums/advanced-math.c b/server/lums/advanced-math.c
index 2bc0369..75fffd5 100644
--- a/server/lums/advanced-math.c
+++ b/server/lums/advanced-math.c
@@ -1,3 +1,5 @@
+#define _POSIX_C_SOURCE 200809L
+#define _DEFAULT_SOURCE
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
@@ -8,16 +10,15 @@
 #include <immintrin.h>  // AVX2/SIMD
 #include "lums_backend.h"
 
-// Détection runtime des capacités SIMD
-static bool simd_available = false;
+// Détection runtime des capacités SIMD - simd_available est déjà défini dans lums_backend.h
 
 void init_simd_support() {
     __builtin_cpu_init();
     simd_available = __builtin_cpu_supports("avx2");
 }
 
-// Logs scientifiques avec timestamps nanosecondes
-static void log_scientific_operation(const char* operation, double input, double result, long duration_ns) {
+// Logs scientifiques avec timestamps nanosecondes - fonction déjà déclarée dans lums_backend.h
+void log_scientific_operation_impl(const char* operation, double input, double result, long duration_ns) {
     FILE* log_file = fopen("logs/scientific_traces/lums_operations.jsonl", "a");
     if (log_file) {
         fprintf(log_file, 
@@ -58,7 +59,7 @@ void lums_fusion_vectorized(double* lums_a, double* lums_b, double* result, size
     long duration_ns = (end.tv_sec - start.tv_sec) * 1000000000L + 
                        (end.tv_nsec - start.tv_nsec);
 
-    log_scientific_operation("VECTORIZED_FUSION", (double)count, 0.0, duration_ns);
+    log_scientific_operation_impl("VECTORIZED_FUSION", (double)count, 0.0, duration_ns);
 }
 
 
@@ -66,7 +67,7 @@ void lums_fusion_vectorized(double* lums_a, double* lums_b, double* result, size
 double lums_sqrt_newton_raphson(double x, double precision) {
     if (x < 0) {
         // Gestion révolutionnaire: transformation géométrique au lieu d'erreur
-        log_scientific_operation("SQRT_NEGATIVE", x, NAN, 0);
+        log_scientific_operation_impl("SQRT_NEGATIVE", x, NAN, 0);
         return NAN; // Pour l'instant, sera remplacé par transformation spatiale
     }
 
@@ -89,7 +90,7 @@ double lums_sqrt_newton_raphson(double x, double precision) {
     clock_gettime(CLOCK_MONOTONIC, &end);
     long duration_ns = (end.tv_sec - start.tv_sec) * 1000000000L + (end.tv_nsec - start.tv_nsec);
 
-    log_scientific_operation("SQRT_NEWTON_RAPHSON", x, guess, duration_ns);
+    log_scientific_operation_impl("SQRT_NEWTON_RAPHSON", x, guess, duration_ns);
     return guess;
 }
 
@@ -140,14 +141,14 @@ bool lums_is_prime_miller_rabin(uint64_t n, int k) {
         if (composite) {
             clock_gettime(CLOCK_MONOTONIC, &end);
             long duration_ns = (end.tv_sec - start.tv_sec) * 1000000000L + (end.tv_nsec - start.tv_nsec);
-            log_scientific_operation("PRIME_TEST_COMPOSITE", (double)n, 0.0, duration_ns);
+            log_scientific_operation_impl("PRIME_TEST_COMPOSITE", (double)n, 0.0, duration_ns);
             return false;
         }
     }
 
     clock_gettime(CLOCK_MONOTONIC, &end);
     long duration_ns = (end.tv_sec - start.tv_sec) * 1000000000L + (end.tv_nsec - start.tv_nsec);
-    log_scientific_operation("PRIME_TEST_PROBABLE", (double)n, 1.0, duration_ns);
+    log_scientific_operation_impl("PRIME_TEST_PROBABLE", (double)n, 1.0, duration_ns);
     return true;
 }
 
@@ -196,6 +197,6 @@ uint64_t lums_fibonacci_authentic(int n) {
     clock_gettime(CLOCK_MONOTONIC, &end);
     long duration_ns = (end.tv_sec - start.tv_sec) * 1000000000L + (end.tv_nsec - start.tv_nsec);
 
-    log_scientific_operation("FIBONACCI", (double)n, (double)b, duration_ns);
+    log_scientific_operation_impl("FIBONACCI", (double)n, (double)b, duration_ns);
     return b;
 }
\ No newline at end of file
diff --git a/server/lums/lums.h b/server/lums/lums.h
index 9778ca3..ceec4c6 100644
--- a/server/lums/lums.h
+++ b/server/lums/lums.h
@@ -51,19 +51,6 @@ typedef enum {
     GROUP_HARMONIC = 7
 } GroupType;
 
-// Core LUM structure
-// Forward declaration for spatial data
-typedef struct SpatialData SpatialData;
-
-typedef struct {
-    uint8_t presence;              // 0 or 1
-    LumStructureType structure_type;
-    SpatialData* spatial_data;     // Type-safe spatial information
-    struct {
-        int x, y;                  // Position in space
-    } position;
-} LUM;
-
 // Type-safe spatial data structure
 typedef struct SpatialData {
     enum { SPATIAL_NONE, SPATIAL_METADATA, SPATIAL_FLOW } type;
@@ -76,6 +63,16 @@ typedef struct SpatialData {
     } data;
 } SpatialData;
 
+// Core LUM structure
+typedef struct {
+    uint8_t presence;              // 0 or 1
+    LumStructureType structure_type;
+    SpatialData* spatial_data;     // Type-safe spatial information
+    struct {
+        int x, y;                  // Position in space
+    } position;
+} LUM;
+
 // LUM Group structure
 typedef struct LUMGroup {
     LUM* lums;
@@ -88,11 +85,17 @@ typedef struct LUMGroup {
 } LUMGroup;
 
 // VORAX Zone structure
+typedef struct {
+    int x, y, width, height;
+} ZoneBounds;
+
 typedef struct VoraxZone {
-    LUMGroup* group;
-    uint32_t zone_id;
-    SpatialCoordinates position;
-    ZoneState state;
+    char* name;                    // Zone name
+    LUMGroup* group;               // LUM group in this zone
+    ZoneBounds bounds;             // Zone bounds
+    uint32_t zone_id;              // Zone ID
+    SpatialCoordinates position;   // Spatial position
+    ZoneState state;               // Zone state
 } VoraxZone;
 
 // VORAX Memory structure
@@ -107,10 +110,17 @@ typedef struct {
 
 // VORAX Engine state
 typedef struct {
-    VoraxZone* zones[MAX_ZONES];
-    uint32_t active_zones;
-    VoraxState state;
-    QuantumField quantum_field;
+    VoraxZone* zones;              // Dynamic array of zones
+    size_t zone_count;             // Number of zones
+    VoraxMemory* memory_slots;     // Dynamic array of memory slots
+    size_t memory_count;           // Number of memory slots
+    char* last_error;              // Last error message
+    char error_message[256];       // Error message buffer
+    char* zone_names[MAX_ZONES];   // Zone names array
+    uint32_t current_tick;         // Current tick counter
+    double energy_budget;          // Energy budget
+    VoraxState state;              // Engine state
+    QuantumField quantum_field;    // Quantum field
 } VoraxEngine;
 
 // Core encoding/decoding functions
diff --git a/server/lums/lums_backend.c b/server/lums/lums_backend.c
index c646b10..03f33ac 100644
--- a/server/lums/lums_backend.c
+++ b/server/lums/lums_backend.c
@@ -1,12 +1,12 @@
+#define _POSIX_C_SOURCE 200809L
+#define _DEFAULT_SOURCE
+#include <time.h>
+#include <unistd.h>
 #include "lums_backend.h"
 #include "lums.h"
 #include "electromechanical.h"
 
-// Fix compilation errors
-#define _POSIX_C_SOURCE 199309L
-
-// Forward declarations
-typedef struct ElectromechanicalState ElectromechanicalState;
+// Forward declarations - ElectromechanicalState is already defined in electromechanical.h
 typedef struct MemoryBlock {
     uint64_t data;
     uint64_t timestamp;
diff --git a/server/lums/lums_backend.h b/server/lums/lums_backend.h
index 71cfbfc..655081d 100644
--- a/server/lums/lums_backend.h
+++ b/server/lums/lums_backend.h
@@ -68,7 +68,7 @@ void lums_fusion_vectorized(double* lums_a, double* lums_b, double* result, size
 int lums_backend_init(void);
 void lums_backend_cleanup(void);
 int lums_compute_fusion_real(uint64_t lum_a, uint64_t lum_b, uint64_t* result);
-int lums_compute_split_real(uint64_t lum_input, int zones, uint64_t* results);
+int lums_compute_split_real(uint64_t lum_source, uint64_t* result_a, uint64_t* result_b);
 int lums_compute_cycle_real(uint64_t lum_input, int modulo, uint64_t* result);
 
 // Métriques et status
@@ -79,5 +79,6 @@ void lums_backend_status_report(void);
 
 // Tests
 int lums_backend_comprehensive_test(void);
+char* uint64_to_binary_string(uint64_t value);
 
 #endif // LUMS_BACKEND_H
\ No newline at end of file
diff --git a/server/lums/vorax.c b/server/lums/vorax.c
index 654c72b..9e0b65a 100644
--- a/server/lums/vorax.c
+++ b/server/lums/vorax.c
@@ -612,15 +612,23 @@ VoraxEngine* vorax_create_engine(void) {
     VoraxEngine* engine = malloc(sizeof(VoraxEngine));
     if (!engine) return NULL;
 
-    // Initialize zones dynamically
-    for (int i = 0; i < MAX_ZONES; i++) {
-        engine->zones[i] = NULL;
-        engine->zone_names[i] = NULL;
-    }
-
+    // Initialize engine
+    engine->zones = NULL;
     engine->zone_count = 0;
+    engine->memory_slots = NULL;
+    engine->memory_count = 0;
+    engine->last_error = NULL;
     engine->current_tick = 0;
     engine->energy_budget = 1000.0;
+    engine->state = VORAX_READY;
+    engine->quantum_field.field_strength = 1.0;
+    engine->quantum_field.coherence = 1.0;
+    
+    // Initialize zone names array
+    for (int i = 0; i < MAX_ZONES; i++) {
+        engine->zone_names[i] = NULL;
+    }
+    
     memset(engine->error_message, 0, sizeof(engine->error_message));
 
     return engine;
@@ -629,27 +637,53 @@ VoraxEngine* vorax_create_engine(void) {
 void vorax_destroy_engine(VoraxEngine* engine) {
     if (!engine) return;
 
-    for (int i = 0; i < MAX_ZONES; i++) {
-        if (engine->zones[i]) {
-            if (engine->zones[i]->lums) {
-                free(engine->zones[i]->lums);
+    // Free zones array
+    if (engine->zones) {
+        for (size_t i = 0; i < engine->zone_count; i++) {
+            if (engine->zones[i].name) {
+                free(engine->zones[i].name);
+            }
+            if (engine->zones[i].group) {
+                free_lum_group(engine->zones[i].group);
+            }
+        }
+        free(engine->zones);
+    }
+    
+    // Free memory slots
+    if (engine->memory_slots) {
+        for (size_t i = 0; i < engine->memory_count; i++) {
+            if (engine->memory_slots[i].name) {
+                free(engine->memory_slots[i].name);
+            }
+            if (engine->memory_slots[i].stored_group) {
+                free_lum_group(engine->memory_slots[i].stored_group);
             }
-            free(engine->zones[i]);
         }
+        free(engine->memory_slots);
+    }
+    
+    // Free zone names
+    for (int i = 0; i < MAX_ZONES; i++) {
         if (engine->zone_names[i]) {
             free(engine->zone_names[i]);
         }
     }
+    
+    // Free last error
+    if (engine->last_error) {
+        free(engine->last_error);
+    }
 
     free(engine);
 }
 
 int vorax_fuse_zones(VoraxEngine* engine, int zone1, int zone2) {
-    if (!engine || zone1 >= MAX_ZONES || zone2 >= MAX_ZONES) return -1;
-    if (!engine->zones[zone1] || !engine->zones[zone2]) return -1;
+    if (!engine || zone1 >= engine->zone_count || zone2 >= engine->zone_count) return -1;
+    if (!engine->zones[zone1].group || !engine->zones[zone2].group) return -1;
 
-    LUMGroup* g1 = engine->zones[zone1];
-    LUMGroup* g2 = engine->zones[zone2];
+    LUMGroup* g1 = engine->zones[zone1].group;
+    LUMGroup* g2 = engine->zones[zone2].group;
 
     // Create fused group
     size_t total_count = g1->count + g2->count;
@@ -674,10 +708,10 @@ int vorax_fuse_zones(VoraxEngine* engine, int zone1, int zone2) {
 }
 
 int vorax_split_zone(VoraxEngine* engine, int zone, int parts) {
-    if (!engine || zone >= MAX_ZONES || parts <= 0) return -1;
-    if (!engine->zones[zone]) return -1;
+    if (!engine || zone >= engine->zone_count || parts <= 0) return -1;
+    if (!engine->zones[zone].group) return -1;
 
-    LUMGroup* source = engine->zones[zone];
+    LUMGroup* source = engine->zones[zone].group;
     if (source->count == 0) return 0;
 
     size_t lums_per_part = source->count / parts;
@@ -686,21 +720,21 @@ int vorax_split_zone(VoraxEngine* engine, int zone, int parts) {
     // Keep first part in original zone
     source->count = lums_per_part + (remainder > 0 ? 1 : 0);
 
-    // Create additional zones for remaining parts
-    for (int i = 1; i < parts && engine->zone_count < MAX_ZONES; i++) {
-        int new_zone_idx = engine->zone_count++;
-        engine->zones[new_zone_idx] = malloc(sizeof(LUMGroup));
-        if (!engine->zones[new_zone_idx]) return -1;
-
-        size_t part_size = lums_per_part + (i < remainder ? 1 : 0);
-        engine->zones[new_zone_idx]->lums = malloc(sizeof(LUM) * part_size);
-        engine->zones[new_zone_idx]->count = part_size;
-
-        // Copy LUMs to new zone
-        size_t src_offset = lums_per_part + (remainder > 0 ? 1 : 0) + (i - 1) * lums_per_part;
-        memcpy(engine->zones[new_zone_idx]->lums, 
-               source->lums + src_offset, 
-               sizeof(LUM) * part_size);
+    // For now, just split the LUMs within the same zone
+    // This is a simplified implementation - in a full implementation,
+    // we would create new zones and distribute the LUMs
+    if (parts > 1) {
+        // Resize the LUMs array to fit the split
+        LUM* new_lums = malloc(sizeof(LUM) * source->count);
+        if (!new_lums) return -1;
+        
+        // Copy first part
+        size_t first_part_size = lums_per_part + (remainder > 0 ? 1 : 0);
+        memcpy(new_lums, source->lums, sizeof(LUM) * first_part_size);
+        
+        free(source->lums);
+        source->lums = new_lums;
+        source->count = first_part_size;
     }
 
     engine->current_tick++;
@@ -708,10 +742,10 @@ int vorax_split_zone(VoraxEngine* engine, int zone, int parts) {
 }
 
 int vorax_cycle_zone(VoraxEngine* engine, int zone, int modulo) {
-    if (!engine || zone >= MAX_ZONES || modulo <= 0) return -1;
-    if (!engine->zones[zone]) return -1;
+    if (!engine || zone >= engine->zone_count || modulo <= 0) return -1;
+    if (!engine->zones[zone].group) return -1;
 
-    LUMGroup* group = engine->zones[zone];
+    LUMGroup* group = engine->zones[zone].group;
     size_t new_count = group->count % modulo;
 
     if (new_count < group->count) {
diff --git a/tests/encodeDecode.lum.test.ts b/tests/encodeDecode.lum.test.ts
new file mode 100644
index 0000000..8970951
--- /dev/null
+++ b/tests/encodeDecode.lum.test.ts
@@ -0,0 +1,62 @@
+import { describe, it, expect } from 'vitest'
+
+// Test pour la conversion bit ↔ LUM
+describe('LUMS Encode/Decode Tests', () => {
+  it('should encode and decode simple bit patterns', () => {
+    // Test avec un pattern simple
+    const testValue = 0b1010 // 10 en binaire
+    
+    // Simulation de l'encodage bit → LUM
+    const encodedLUM = encodeBitToLUM(testValue, 4)
+    expect(encodedLUM).toBeDefined()
+    
+    // Simulation du décodage LUM → bit
+    const decodedValue = decodeLUMToBit(encodedLUM, 4)
+    expect(decodedValue).toBe(testValue)
+  })
+
+  it('should handle zero value', () => {
+    const testValue = 0b0000
+    
+    const encodedLUM = encodeBitToLUM(testValue, 4)
+    expect(encodedLUM).toBeDefined()
+    
+    const decodedValue = decodeLUMToBit(encodedLUM, 4)
+    expect(decodedValue).toBe(testValue)
+  })
+
+  it('should handle maximum value for 8 bits', () => {
+    const testValue = 0b11111111 // 255 en binaire
+    
+    const encodedLUM = encodeBitToLUM(testValue, 8)
+    expect(encodedLUM).toBeDefined()
+    
+    const decodedValue = decodeLUMToBit(encodedLUM, 8)
+    expect(decodedValue).toBe(testValue)
+  })
+
+  it('should preserve information during round-trip conversion', () => {
+    const testValues = [0b0001, 0b0010, 0b0100, 0b1000, 0b1010, 0b1100, 0b1111]
+    
+    for (const value of testValues) {
+      const encodedLUM = encodeBitToLUM(value, 4)
+      const decodedValue = decodeLUMToBit(encodedLUM, 4)
+      expect(decodedValue).toBe(value)
+    }
+  })
+})
+
+// Fonctions de simulation (à remplacer par les vraies fonctions C)
+function encodeBitToLUM(value: number, bitCount: number): any {
+  // Simulation simple - à remplacer par l'appel aux fonctions C
+  return {
+    value: value,
+    bitCount: bitCount,
+    encoded: true
+  }
+}
+
+function decodeLUMToBit(encodedLUM: any, bitCount: number): number {
+  // Simulation simple - à remplacer par l'appel aux fonctions C
+  return encodedLUM.value
+}
\ No newline at end of file
diff --git a/tests/lums.test.js b/tests/lums.test.js
index 8e6e531..05ce78f 100644
--- a/tests/lums.test.js
+++ b/tests/lums.test.js
@@ -3,8 +3,8 @@ const fs = require('fs');
 
 describe('LUMS System Complete Tests', () => {
   beforeAll(() => {
-    // Compile the C library
-    execSync('make clean && make all', { cwd: '.' });
+    // Ensure build directory exists and compile the C library
+    execSync('mkdir -p build/server/lums && make all', { cwd: '.' });
   });
 
   describe('Basic LUMS Operations', () => {
diff --git a/vitest.config.ts b/vitest.config.ts
new file mode 100644
index 0000000..d2b3af2
--- /dev/null
+++ b/vitest.config.ts
@@ -0,0 +1,16 @@
+import { defineConfig } from 'vitest/config'
+
+export default defineConfig({
+  test: {
+    globals: true,
+    environment: 'node',
+    include: ['tests/**/*.{test,spec}.{js,ts}'],
+    exclude: ['node_modules', 'dist', 'build']
+  },
+  resolve: {
+    alias: {
+      '@': '/client/src',
+      '@shared': '/shared'
+    }
+  }
+})
\ No newline at end of file
